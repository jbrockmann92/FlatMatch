@model FlatMatchApp.Models.RenterViewModel

@{
    ViewData["Title"] = "Details";
    Layout = "~/Views/Shared/_RenterLayout.cshtml";
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.0.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-modal/0.9.1/jquery.modal.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jquery-modal/0.9.1/jquery.modal.min.css" />
    <title>Details</title>
</head>
<body>
    <div class="container" style="margin-top: 20px">
        <div class="row">
            <div class="col-md-6">
                <body onload="initialize()">
                    <div id="map"></div>
                </body>
            </div>
            <div class="col-md-6">
                <h4>Property Details</h4>
                <p><a type="button" class="btn btn-primary" href="#ex1" rel="modal:open">Message User!</a></p>

                <hr />
                <dl class="row">
                    <dt class="col-md-3">
                        Leaseholder:
                    </dt>
                    <dd class="col-md-4">
                        @Html.DisplayFor(model => model.Leaseholder.FirstName) @Html.DisplayFor(model => model.Leaseholder.LastName)
                    </dd>
                </dl>
                <dl class="row">
                    <dt class="col-md-3">
                        Address:
                    </dt>
                    <dd class="col-md-4">
                        @Html.DisplayFor(model => model.Leaseholder.Property.Address.StreetName)
                    </dd>
                </dl>
                <dl class="row">
                    <dt class="col-md-3">
                        City:
                    </dt>
                    <dd class="col-md-4">
                        @Html.DisplayFor(model => model.Leaseholder.Property.Address.City)
                    </dd>
                </dl>
            </div>
        </div>
    </div>
    <div>
        <a asp-action="Index">Back to List</a>
    </div>

    @* Modal code *@
    <div id="ex1" class="modal">
        <div class="container">
            <div class="row">&nbsp;</div>
            <div class="row">
                <div class="col-6">&nbsp;</div>
                <div class="col-6">
                    <form class="form-inline">
                        <div class="input-prepend input-append">
                            <input type="text" name="group-message" id="group-message-text" placeholder="Type a message" />
                            <input type="text" name="group-name" id="group-name" placeholder="Type a group name" />
                            <input type="button" id="groupmsg" class="btn btn-primary" value="Send to Group" />
                            <input type="button" id="join-group" class="btn btn-primary" value="Join Group" />
                            <input type="button" id="leave-group" class="btn btn-primary" value="Leave Group" />
                        </div>
                    </form>
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    <hr />
                </div>
            </div>
            <div class="row">
                <div class="col-6">&nbsp;</div>
                <div class="col-6">
                    <ul id="messagesList"></ul>
                </div>
            </div>
        </div>
        <a href="#" rel="modal:close">Close</a>
    </div>


    <script>
    var geocoder;
    var map;
    //var labels = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    //var labelIndex = 0;
    function initialize() {
        geocoder = new google.maps.Geocoder();
        var address = "@Model.Leaseholder.Property.Address.StreetName".concat("@Model.Leaseholder.Property.Address.City").concat("@Model.Leaseholder.Property.Address.State");
        geocoder.geocode({ 'address': address }, function (results, status) {
            var lat = results[0].geometry.location.lat;
            var lng = results[0].geometry.location.lng;
            if (status == 'OK') {
                    var mapOptions = {
                        zoom: 14,
                        center: { lat: 43.037417, lng: -87.934474 }
                        }
                    map = new google.maps.Map(document.getElementById('map'), mapOptions);
                placeMarkers();
                }
                else {
                    alert('Geocode was not successful for the following reason: ' + status);
                }
            }); //This is from https://developers.google.com/maps/documentation/javascript/geocoding#GeocodingRequests
    }

        function placeMarkers() {
            axios.get('https://maps.googleapis.com/maps/api/place/nearbysearch/json', {
                params: {
                    location: "43.037417,-87.934474",
                    radius: 1500,
                    type: "restaurant",
                    key: "@API_KEYS.GoogleAPI"

                }
            })
                .then(function (response) {
                    for (place in response.data.results) {
                        lat = response.data.results[place].geometry.location.lat;
                        lng = response.data.results[place].geometry.location.lng;

                        var marker = new google.maps.Marker({ position: { lat: lat, lng: lng }, map: map });
                        console.log(lat);
                    }
                });
        }
        //Modal workload


    @*function codeAddress() {
        var addresses = [];
        @foreach (var leaseholder in Model.Leaseholders)
        {
            @:addresses.push("@leaseholder.Property.Address.StreetName + @leaseholder.Property.Address.City + @leaseholder.Property.Address.State")
        }
        for (var i = 0; i < @Model; i++) {
            var address = addresses[i];
            geocoder.geocode( { 'address': address}, function(results, status) {
                if (status == 'OK') {
                    map.setCenter(results[0].geometry.location);
                    var marker = new google.maps.Marker({
                        //label: labels[labelIndex++], //couldn't get labels to work, commenting out to potentially add later
                        map: map,
                        position: results[0].geometry.location
                    });
                } else {
                    alert('Geocode was not successful for the following reason: ' + status);
                }
            });
        }
    }*@

    </script>

    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key= + @API_KEYS.GoogleAPI">
    </script>
    @* General javascript file *@
    <script type="text/javascript" src="~/js/site.js"></script>
    @* Scripts for global chat *@
    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    <script src="~/js/chat.js"></script>
    @* Others *@
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
</body>
</html>
