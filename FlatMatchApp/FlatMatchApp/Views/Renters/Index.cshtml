@model FlatMatchApp.Models.RenterViewModel

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_RenterLayout.cshtml";
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
</head>
<body>

    <p>
        <body onload="initialize()">
            <div id="map"></div>
        </body>
    </p>


    <table class="table">
        <thead>
            <tr>
                <th>
                    Street Name
                </th>
                <th>
                    City
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody id="myTable">
            @foreach (var item in Model.Leaseholders)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Property.Address.StreetName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Property.Address.City)
                    </td>
                    <td>
                        <a asp-action="Details" asp-route-id="@item.Id">Details</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="container">
        <div class="row">&nbsp;</div>
        <div class="row">
            <div class="col-6">&nbsp;</div>
            <div class="col-6">
                <form class="form-inline">
                    <div class="input-prepend input-append">
                        <input type="text" name="group-message" id="group-message-text" placeholder="Type a message" />
                        <input type="text" name="group-name" id="group-name" placeholder="Type a group name" />
                        <input type="button" id="groupmsg" class="btn btn-primary" value="Send to Group" />
                        <input type="button" id="join-group" class="btn btn-primary" value="Join Group" />
                        <input type="button" id="leave-group" class="btn btn-primary" value="Leave Group" />
                    </div>
                </form>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <hr />
            </div>
        </div>
        <div class="row">
            <div class="col-6">&nbsp;</div>
            <div class="col-6">
                <ul id="messagesList"></ul>
            </div>
        </div>
    </div>


    <script>
    var geocoder;
    var map;
    //var labels = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    //var labelIndex = 0;
    function initialize() {
        geocoder = new google.maps.Geocoder();
        var latlng = new google.maps.LatLng(43.0389, -87.9065); //This is from https://developers.google.com/maps/documentation/javascript/geocoding#GeocodingRequests
        var mapOptions = {
            zoom: 14,
            center: latlng
        }
        map = new google.maps.Map(document.getElementById('map'), mapOptions);
        codeAddress();
        infoWindow = new google.maps.InfoWindow;
        // Try HTML5 geolocation.
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var pos = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };

            infoWindow.setPosition(pos);
            infoWindow.setContent('Current Location');
            infoWindow.open(map);
            map.setCenter(pos);
          }, function() {
            handleLocationError(true, infoWindow, map.getCenter());
          });
        } else {
          // Browser doesn't support Geolocation
          handleLocationError(false, infoWindow, map.getCenter());
        }
    }

    function codeAddress() {
        var addresses = [];
        @foreach (var leaseholder in Model.Leaseholders)
        {
            @:addresses.push("@leaseholder.Property.Address.StreetName + @leaseholder.Property.Address.City + @leaseholder.Property.Address.State")
        }
        for (var i = 0; i < @Model.Leaseholders.Count; i++) {
            var address = addresses[i];
            geocoder.geocode( { 'address': address}, function(results, status) {
                if (status == 'OK') {
                    map.setCenter(results[0].geometry.location);
                    var marker = new google.maps.Marker({
                        //label: labels[labelIndex++], //couldn't get labels to work, commenting out to potentially add later
                        map: map,
                        position: results[0].geometry.location
                    });
                } else {
                    alert('Geocode was not successful for the following reason: ' + status);
                }
            });
        }
    function handleLocationError(browserHasGeolocation, infoWindow, pos) {
        infoWindow.setPosition(pos);
        infoWindow.setContent(browserHasGeolocation ?
                              'Error: The Geolocation service failed.' :
                              'Error: Your browser doesn\'t support geolocation.');
        infoWindow.open(map);
      }
    }
    </script>

    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key= + @API_KEYS.GoogleAPI">
    </script>
    <script type="text/javascript" src="~/js/site.js"></script>
    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    <script src="~/js/chat.js"></script>
</body>
</html>
